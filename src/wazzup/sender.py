#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Wazzup API
"""

import os
import requests
import logging
from typing import Dict, Optional, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class WazzupSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Wazzup API"""
    
    def __init__(self):
        self.api_key = os.getenv('WAZZUP_API_KEY')
        self.base_url = 'https://api.wazzup24.com/v3'
        self.channel_id = os.getenv('WAZZUP_CHANNEL_ID', '876c0da6-64ca-4aae-bf97-174348d56709')
        
        if not self.api_key:
            raise ValueError("WAZZUP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def send_message(self, chat_id: str, text: str, message_type: str = 'text') -> Optional[Dict]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Wazzup API
        
        Args:
            chat_id: ID —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "79002121614")
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (text, image, etc.)
            
        Returns:
            –û—Ç–≤–µ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º chat_id –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è WhatsApp
            if not chat_id.endswith('@c.us'):
                formatted_chat_id = f"{chat_id}@c.us"
            else:
                formatted_chat_id = chat_id
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message_data = {
                'channelId': self.channel_id,
                'chatId': formatted_chat_id,
                'chatType': 'whatsapp',
                'text': text
            }
            
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            url = f"{self.base_url}/message"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {formatted_chat_id}: {text[:50]}...")
            
            response = requests.post(url, json=message_data, headers=headers)
            
            if response.status_code in [200, 201]:
                result = response.json()
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {result.get('messageId', 'unknown')}")
                return result
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def send_reply_to_podio_comment(self, podio_comment: Dict[str, Any]) -> Optional[Dict]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ Podio –≤ WhatsApp
        
        Args:
            podio_comment: –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ Podio
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è Podio
            comment_text = podio_comment.get('value', '')
            
            # –ò—â–µ–º chat_id –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            chat_id = self._extract_chat_id_from_comment(podio_comment)
            
            if not chat_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
                return None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return self.send_message(chat_id, comment_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ Podio: {e}")
            return None
    
    def _extract_chat_id_from_comment(self, podio_comment: Dict[str, Any]) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è Podio
        –ù—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è chat_id
            # –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ external_id, –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏–∑ external_id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            external_id = podio_comment.get('external_id', '')
            if external_id and '@c.us' in external_id:
                return external_id.replace('@c.us', '')
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            comment_text = podio_comment.get('value', '')
            if 'chat_id:' in comment_text.lower():
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω chat_id: 79002121614
                import re
                match = re.search(r'chat_id:\s*(\d+)', comment_text, re.IGNORECASE)
                if match:
                    return match.group(1)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π chat_id (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            return "79002121614"  # –í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è chat_id: {e}")
            return None
    
    def get_channel_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            url = f"{self.base_url}/channels"
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                channels = response.json()
                for channel in channels:
                    if channel.get('channelId') == self.channel_id:
                        return channel
                return channels[0] if channels else None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    from dotenv import load_dotenv
    load_dotenv()
    
    sender = WazzupSender()
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    result = sender.send_message(
        chat_id="79002121614",
        text="ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Podio —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é!"
    )
    
    if result:
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
